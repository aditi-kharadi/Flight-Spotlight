<!DOCTYPE html>
<html lang="en">
<head>
    <title>Openskies Flight Spotlight</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link rel="icon" href="assets/img/favicon.png">
    <link href='https://fonts.googleapis.com/css?family=Karla' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Inconsolata' rel='stylesheet' type='text/css'>

    <link type="text/css" rel="stylesheet" href="assets/css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="assets/css/style.css">
    <link rel="stylesheet" type="text/css" href="assets/css/base.css">

    <link rel="stylesheet" href="/assets/js/humane/flatty.css">

    <script type="text/javascript" src="/assets/js/jquery/jquery.min.js"></script>
    <script type="text/javascript" src="/assets/js/socket.io/socket.io.js"></script>
    <script type="text/javascript" src="/assets/js/humane/humane.min.js">
    </script>
    <script src="/assets/Build/Cesium/Cesium.js"></script>
    <style>
        @import url(/assets/Build/Cesium/Widgets/widgets.css);
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-4 col-md-4 main">
                <h3 class="page-header">Flight Spotlight</h3>
                <br>
                <div class="information">
                    
                    <form id="dss-query-form" method="post" action="/spotlight">                                               
                          <!-- <label for="geo_polygon_string">Area of Interest</label><br> -->
                          <textarea rows="4" cols="20" id="geo_polygon_string" value="<%= data.geo_polygon_string %>" name="geo_polygon_string" placeholder="Paste a valid GeoJSON of the area of interest here"></textarea>
                       
                          <br>
                        <div class="form-actions">
                            <button class="button" id="retrive_flights" type="submit">Stream flights</button>
                            
                        </div>

                        <div class="page" id="content-profile">          
                            <br>
                                   
                        </div>

                      </form>

                      <a class="btn btn-primary btn-margin" href="/logout" >Log Out</a>  
                      
                       <div class="d-none loading-spinner" id="spinner-cont"><br>
                        <img src="/assets/img/spinner.gif" height="30px">
                       </div>
                       <div class="live-updates" id="live-updates">
                            <ul class="text-right list-inline" id="latest-status">
                            </ul>
                       </div>
                      <hr>
                      <!-- <div class="d-none" id="flight-declarations">
                        <button id="show-flight-declarations" type="button" class="btn btn-link">Display hourly Flight Declarations</button>
                      </div> -->


                </div>
            </div>

            <div class="col-sm-8 col-md-8 sidebar">
                <div id="cesiumContainer"></div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        

// let logOut = () => {

//   fetch('/logout', {
//     method: 'POST',
//     credentials: 'same-origin', // <--- YOU NEED THIS LINE
//     redirect: "follow"
//   }).then(res => {
//     console.log(res);
//   }).catch(err => {
//     console.log(err);
//   });

// }
// fetch('/logout', { method: 'POST', credentials: 'include' })
//     .then(res=> console.log("->"));



        var socketHost = location.origin.replace(/^http/, 'ws');
        let list = document.getElementById("latest-status");
        var addToList = function (item_value) {
            while ( list.children.length >= 3 )
            {
            list.removeChild(list.firstChild );
            }
            var item = document.createElement("li");
            item.innerHTML = item_value;
            list.appendChild(item);
        }
        
        const email  = '<%= userProfile.email %>';

        var socket = io.connect(socketHost);
        socket.on('connect_failed', function() {
            errorMsg('Data connection failed, please contact your administrator.');
        });
        socket.on('disconnect', function() {
            console.log('disconnected');
        });
        socket.on('welcome', function(msg) {
            console.log('Welcome message:', msg);
            console.log('email:', email);
        });
        socket.on('connect', function() {
            socket.emit('room', email);
            //res.redirect('/');
        });
        socket.on('connect_timeout', function() {
            console.log("timed out");

        });
        socket.on('message', function(spotlight_data) {
            // console.log(flight_data);
            if(spotlight_data.type =='message') {     
                
                if (spotlight_data.alert_type =='aoi'){
                
                    const cur_result = spotlight_data.results.object;
                    
                    viewer.entities.add({
                        position : Cesium.Cartesian3.fromDegrees(cur_result.coordinates[1], cur_result.coordinates[0], cur_result.coordinates[2]),
                        point : {
                            pixelSize : 5,
                            color : Cesium.Color.RED,
                            outlineWidth: 0
                        },
                        path : {
                            resolution : 1,
                            leadTime: 0,
                            trailTime: 5,
                            material : new Cesium.PolylineGlowMaterialProperty({
                                glowPower : 0.1,
                                color : Cesium.Color.YELLOW
                            }),
                            width : 3
                        }
                    });
                }
                else if (spotlight_data.alert_type== 'aoi_geo_fence') {                    
                    const result_geo_json = spotlight_data.results.objects;
                    
                    for (let index = 0; index < result_geo_json.length; index++) {
                        const geo_json_element = result_geo_json[index]['object'];
                        const geo_fence_heights = result_geo_json[index]['fields'];
                        var dataSource = Cesium.GeoJsonDataSource.load(geo_json_element).then(
                        function(dataSource) {
                            var p = dataSource.entities.values;
                            for (var i = 0; i < p.length; i++) {
                                p[i].polygon.height = geo_fence_heights[1]; // or height property
                                p[i].polygon.extrudedHeight = geo_fence_heights[0]; // or height property
                                p[i].polygon.outlineColor = Cesium.Color.PINK.withAlpha(0.2),
                                p[i].polygon.material = Cesium.Color.HOTPINK.withAlpha(0.2)
                            }
                            viewer.dataSources.add(dataSource);
                            viewer.zoomTo(dataSource);
                        }
                    );                                    
                        
                    }
                }
                else if (spotlight_data.alert_type == 'geo_fence_crossed') {
                    let d = new Date();
                    addToList('<span class="date">'+ d.toLocaleTimeString() +'</span> '+ spotlight_data.results);

                }
            }
        });
                
        var bing = new Cesium.BingMapsImageryProvider({
            url: 'https://dev.virtualearth.net',
            key: '<%= bing_key %>',
            mapStyle: Cesium.BingMapsStyle.AERIAL
        });

        var mapbox = new Cesium.MapboxImageryProvider({
            mapId: '<&= mapbox_id %>',
            accessToken: '<%= mapbox_key %>'
        });

        var viewer = new Cesium.Viewer('cesiumContainer', {
            "geocoder": false,
            "homeButton": false,
            "baseLayerPicker": false,
            "infoBox": false,
            "sceneModePicker": false,
            "animation": false,
            "selectionIndicator": false,
            "fullscreenButton": false,
            "timeline": false,
            "navigationHelpButton": false,
            "imageryProvider":bing
        });
            
        var scene = viewer.scene;
        var clock = viewer.clock;
        var camera = viewer.camera;

        var cameralat;
        var cameralng;

        const dss_form = $('#dss-query-form');
        dss_form.on('submit', submitHandler);

        function submitHandler (e) {
            e.preventDefault();
            var data = {};
            let geo_json = document.getElementById('geo_polygon_string').value;
            data['geo_json']  = geo_json;
            data['email'] = email;
            
            $.ajax({
                url: '/set_aoi',
                type:'POST',
                data: data
            }).done(response => {
                let aoi =  viewer.dataSources.add(Cesium.GeoJsonDataSource.load(JSON.parse(geo_json), {
                            stroke: Cesium.Color.GRAY,
                            fill: Cesium.Color.GRAY.withAlpha(0.2),
                            strokeWidth: 3
                        }));
                    viewer.flyTo(aoi);
                    let spinner_cont =  document.getElementById("spinner-cont");
                    spinner_cont.classList.remove("d-none");
                    // let flight_declaration_cont = document.getElementById('flight-declarations');
                    // flight_declaration_cont.classList.remove("d-none");
                    humane.log(response['msg'],{
                        addnCls: 'humane-flatty-success'
                });


            }).fail(error => {
                if (error.status ==422)
                {
                    humane.log("Invalid GeoJSON provided",{
                    addnCls: 'humane-flatty-error'
                });
                }
                console.log(error);
            });
        }

        
        const fd_button = $('#show-flight-declarations');
        fd_button.on('click', get_flight_declarations);

        function get_flight_declarations(e) {

            $.ajax({
                url: '/get_flight_declarations',
                type:'GET'

            }).done(response => {
                console.log(response);

            }).fail(error => {
                if (error.status ==422)
                {
                    humane.log("Error in getting declarations",{
                    addnCls: 'humane-flatty-error'
                });
                }
                console.log(error);
            });
        }

    </script>
</body>

</html>